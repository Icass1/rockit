---
import PinList from "@/components/PinList";
import AddToLibrary from "@/components/AddToLibrary";
import { Download, ArrowLeft, Heart } from "lucide-react";
import PlayList from "@/components/PlayList";
import AddToQueue from "@/components/AddToQueue";
import type { PlaylistDB, SongDB, UserDBLikedSong } from "@/lib/db";

function getMinutes(seconds: number) {
    seconds = Math.round(seconds);

    if (typeof seconds !== "number" || isNaN(seconds)) {
        return "Invalid input";
    }

    // Calculate minutes and remaining seconds
    const minutes = Math.floor(seconds / 60);

    // Format the result with leading zeros
    const formattedMinutes = String(minutes).padStart(2, "0");

    return `${formattedMinutes}`;
}

export interface Props {
    inDatabase: boolean;
    id: string;
    songs: SongDB<
        | "id"
        | "images"
        | "image"
        | "name"
        | "albumId"
        | "duration"
        | "artists"
        | "path"
        | "albumName"
    >[];
    className: string;
    playlist:
        | PlaylistDB
        | {
              name: string;
              songs: UserDBLikedSong[];
              image: string;
              images: {
                  url: string;
              }[];
              owner: string;
          };
}

const { inDatabase } = Astro.props;
const { id } = Astro.props;
const { songs } = Astro.props;
const { playlist } = Astro.props;
const { className = "" } = Astro.props;
---

<div
    class={"flex flex-col gap-1 relative md:top-1/2 md:-translate-y-1/2 md:w-1/3 md:max-w-96 h-fit md:max-h-none md:mx-10 " +
        className}
>
    <div class="flex flex-row gap-2 mb-2">
        {!inDatabase && <Download strokeWidth={0.9} className="h-10 w-10" />}
        <PinList type="playlist" id={id} client:only="react" />
        <AddToLibrary type="playlist" id={id} client:only="react" />
        <PlayList client:only="react" songs={songs} type="playlist" id={id} />
        <AddToQueue client:only="react" songs={songs} type="playlist" id={id} />
    </div>
    {
        id == "liked" ? (
            <div
                class="relative rounded-md w-full aspect-square object-cover"
                style="background-image:url(/RockitBackground.png); background-size: cover;"
            >
                <Heart
                    className="w-1/2 h-1/2 absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2"
                    fill="white"
                />
            </div>
        ) : (
            <img
                src={
                    playlist.image
                        ? `/api/image/${playlist.image}`
                        : playlist.images[0].url
                }
                class="rounded-md"
            />
        )
    }
    <label class="pt-2 text-2xl font-semibold">{playlist.name}</label>
    <label
        class="text-xl font-semibold text-stone-400 md:hover:underline cursor-pointer"
        >{playlist.owner}</label
    >
    <label class="text-sm text-stone-400"
        >{playlist.songs.length} Songs | {
            getMinutes(
                songs.reduce((accumulator: number, song) => {
                    return accumulator + (song?.duration || 0);
                }, 0)
            )
        } Minutes</label
    >
</div>
