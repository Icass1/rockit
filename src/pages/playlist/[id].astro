---
import Layout from "@/layouts/Layout.astro";

import PlaylistHeader from "@/components/Playlist/PlaylistHeader";
import PlaylistSongsView from "@/components/Playlist/PlaylistSongsView";
import { db } from "@/lib/db/db";
import {
    parsePlaylist,
    type PlaylistDBSong,
    type PlaylistDBSongWithAddedAt,
    type RawPlaylistDB,
} from "@/lib/db/playlist";
import { parseSong, type RawSongDB, type SongDB } from "@/lib/db/song";
import { parseUser, type RawUserDB, type UserDB } from "@/lib/db/user";
import { getStats, type SongForStats } from "@/lib/stats";
import type { SpotifyPlaylistImage } from "@/types/spotify";

const { id } = Astro.params as { id: string };
if (!Astro.locals.user) {
    return Astro.redirect("/login");
}

interface Playlist {
    name: string;
    songs: PlaylistDBSong[];
    image: string;
    images: SpotifyPlaylistImage[];
    owner: string;
}
let playlist: Playlist | undefined;
let inDatabase;

if (id == "liked") {
    const userDB = parseUser(
        db
            .prepare("SELECT likedSongs FROM user WHERE id = ?")
            .get(Astro.locals.user.id) as RawUserDB
    ) as UserDB<"likedSongs">;

    playlist = {
        name: "Liked",
        songs: userDB.likedSongs,
        image: "",
        images: [{ url: "/song-placeholder.png", height: 1, width: 1 }],
        owner: "",
    };
} else if (id == "most-listened") {
    const stats = await getStats(Astro.locals.user.id);
    let songs: SongForStats[] = [];

    stats.songs.forEach((song) => {
        let result = songs.find((findSong) => findSong.id == song.id);
        if (result) {
            result.timesPlayed += 1;
        } else {
            songs.push({
                index: 0,
                name: song.name,
                id: song.id,
                timesPlayed: 1,
                albumId: song.albumId,
                albumName: song.albumName,
                duration: song.duration,
                images: song.images,
                artists: song.artists,
                image: song.image,
            });
        }
    });
    songs = songs
        .toSorted((a, b) => b.timesPlayed - a.timesPlayed)
        .slice(0, 50);

    playlist = {
        name: "Most listened",
        songs: songs,
        image: "",
        images: [{ url: "/song-placeholder.png", height: 1, width: 1 }],
        owner: "",
    };
} else if (id == "last-month") {
    const date = new Date();
    const month = date.getMonth() - 1;
    const year = date.getFullYear();
    date.setMonth(month);
    date.setDate(1);
    date.setHours(0);
    date.setMinutes(0);
    date.setSeconds(0);
    date.setMilliseconds(0);

    const start = date.getTime();

    date.setDate(0);
    date.setMonth(month);
    date.setFullYear(year);
    date.setHours(23);
    date.setMinutes(59);
    date.setSeconds(59);
    date.setMilliseconds(0);
    const end = date.getTime();

    // console.log(start, end);

    const stats = await getStats(Astro.locals.user.id, start, end);
    let songs: SongForStats[] = [];

    stats.songs.forEach((song) => {
        let result = songs.find((findSong) => findSong.id == song.id);
        if (result) {
            result.timesPlayed += 1;
        } else {
            songs.push({
                index: 0,
                name: song.name,
                id: song.id,
                timesPlayed: 1,
                albumId: song.albumId,
                albumName: song.albumName,
                duration: song.duration,
                images: song.images,
                artists: song.artists,
                image: song.image,
            });
        }
    });
    songs = songs
        .toSorted((a, b) => b.timesPlayed - a.timesPlayed)
        .slice(0, 50);

    playlist = {
        name: "Most listened",
        songs: songs,
        image: "",
        images: [{ url: "/song-placeholder.png", height: 1, width: 1 }],
        owner: "",
    };
} else if (id == "recent-mix") {
    const stats = await getStats(
        Astro.locals.user.id,
        new Date().getTime() - 10 * 24 * 60 * 60 * 1000
    );
    let songs: SongForStats[] = [];

    stats.songs.forEach((song) => {
        let result = songs.find((findSong) => findSong.id == song.id);
        if (result) {
            result.timesPlayed += 1;
        } else {
            songs.push({
                index: 0,
                name: song.name,
                id: song.id,
                timesPlayed: 1,
                albumId: song.albumId,
                albumName: song.albumName,
                duration: song.duration,
                images: song.images,
                artists: song.artists,
                image: song.image,
            });
        }
    });
    songs = songs
        .toSorted((a, b) => b.timesPlayed - a.timesPlayed)
        .slice(0, 50);

    playlist = {
        name: "Most listened",
        songs: songs,
        image: "",
        images: [{ url: "/song-placeholder.png", height: 1, width: 1 }],
        owner: "",
    };
} else {
    playlist = parsePlaylist(
        db
            .prepare("SELECT * FROM playlist WHERE id = ?")
            .get(id) as RawPlaylistDB
    );
}

if (playlist) {
    inDatabase = true;
} else {
    return new Response(
        JSON.stringify({
            error: "",
        }),
        {
            status: 404,
        }
    );
}

const songs = playlist.songs
    .map(
        (
            song
        ):
            | PlaylistDBSongWithAddedAt<
                  | "name"
                  | "albumId"
                  | "duration"
                  | "artists"
                  | "path"
                  | "albumName"
                  | "image"
                  | "id"
                  | "images"
              >
            | undefined => {
            return {
                added_at: song.added_at,
                ...(parseSong(
                    db
                        .prepare(
                            "SELECT name, albumId, duration, artists, path, albumName, image, images, id FROM song WHERE id = ?"
                        )
                        .get(song.id) as RawSongDB
                ) as SongDB<
                    | "name"
                    | "albumId"
                    | "duration"
                    | "artists"
                    | "path"
                    | "albumName"
                    | "image"
                    | "id"
                    | "images"
                >),
            };
        }
    )
    .filter(
        (
            song
        ): song is PlaylistDBSongWithAddedAt<
            | "id"
            | "images"
            | "image"
            | "name"
            | "albumId"
            | "duration"
            | "artists"
            | "path"
            | "albumName"
        > => song !== undefined
    );
---

<Layout
    title={playlist.name + " â€¢ Rock It!"}
    currentPage=""
    bgImage={`/api/image/blur/${playlist.image}`}
>
    <div class="md:mt-0"></div>
    <div
        class="px-3 md:px-2 flex flex-col md:flex-row gap-2 w-full h-full relative"
    >
        <PlaylistHeader
            id={id}
            playlist={playlist}
            songs={songs}
            inDatabase={inDatabase}
            className="hidden md:flex w-full"
            client:only="react"
        />

        <PlaylistSongsView
            id={id}
            songs={songs}
            inDatabase={inDatabase}
            playlist={playlist}
            client:only="react"
        />
    </div>
</Layout>
