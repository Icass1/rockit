---
import Layout from "@/layouts/Layout.astro";
import {
    db,
    type SongDB,
    type RawSongDB,
    type RawAlbumDB,
    parseAlbum,
    parseSong,
} from "@/lib/db";
import AlbumSong from "@/components/AlbumSong";
import { ArrowLeft, Disc, Download, Music, PlayCircle } from "lucide-react";

import PinList from "@/components/PinList";
import AddToLibrary from "@/components/AddToLibrary";

const { id } = Astro.params as { id: string };

if (!Astro.locals.user) {
    return Astro.redirect("/login");
}

let album;
let inDatabase;

album = parseAlbum(
    db.prepare("SELECT * FROM album WHERE id = ?").get(id) as RawAlbumDB
);

if (album) {
    inDatabase = true;
} else {
    return new Response(
        JSON.stringify({
            error: "",
        }),
        {
            status: 404,
        }
    );
}

const songs = album.songs.map(
    (
        songID: string
    ):
        | SongDB<
              | "images"
              | "id"
              | "name"
              | "artists"
              | "albumId"
              | "albumName"
              | "path"
              | "duration"
              | "discNumber"
              | "trackNumber"
          >
        | undefined => {
        return parseSong(
            db
                .prepare(
                    "SELECT images, id, name, artists, albumId, albumName, path, duration, discNumber, trackNumber FROM song WHERE id = ?"
                )
                .get(songID) as RawSongDB
        );
    }
);

songs.sort((a, b) => {
    if (
        typeof a?.trackNumber == "undefined" ||
        typeof b?.trackNumber == "undefined"
    ) {
        return 0;
    }
    return a.trackNumber - b.trackNumber;
});

const discs: SongDB<
    | "images"
    | "id"
    | "name"
    | "artists"
    | "albumId"
    | "albumName"
    | "path"
    | "duration"
    | "discNumber"
    | "trackNumber"
>[][] = Array(Math.max(...songs.map((song) => song?.discNumber || 0)))
    .fill(1)
    .map((_) => []);

songs.map((song) => {
    if (song?.discNumber) {
        discs[song?.discNumber - 1].push({ ...song });
    }
});

function getMinutes(seconds: number) {
    seconds = Math.round(seconds);

    if (typeof seconds !== "number" || isNaN(seconds)) {
        return "Invalid input";
    }

    // Calculate minutes and remaining seconds
    const minutes = Math.floor(seconds / 60);

    // Format the result with leading zeros
    const formattedMinutes = String(minutes).padStart(2, "0");

    return `${formattedMinutes}`;
}

function getDate(date: string) {
    const dateSplit = date.split("-");

    return dateSplit[0];
}

const meta = {
    "og:site_name": "Rockit",
    site_name: "Rockit",
    "og:title": album.name,
    title: album.name,
    description: `${album.artists.map((artist) => artist.name)} · Album · ${album.releaseDate} · 10 songs`,
    "og:description": `${album.artists.map((artist) => artist.name)} · Album · ${album.releaseDate} · 10 songs`,
    "og:url": `https://rockit.rockhosting.org/album/${id}`,
    "og:type": "music.album",
    "og:image": album.images[0].url,
};
---

<Layout title={album.name + " • Rock It!"} currentPage="" meta={meta}>
    <div
        class="pl-4 g rid flex flex-row w-full h-full grid-cols-[min-content_1fr] relative pr-2"
    >
        <a
            class="absolute px-3 py-2 flex flex-row gap-2 hover:bg-[#2e2e2e] cursor-pointer bg-[#1d1d1d] rounded-xl left-[3.5rem]"
            href="/library"
        >
            <ArrowLeft />
            <label>Return</label>
        </a>
        <div
            class="flex flex-col gap-1 relative top-1/2 -translate-y-1/2 w-1/3 max-w-96 h-fit mx-10"
        >
            <div class="flex flex-row gap-2 mb-2">
                {
                    !inDatabase && (
                        <Download strokeWidth={0.9} className="h-10 w-10" />
                    )
                }
                <PinList type="album" id={id} client:only="react" />
                <AddToLibrary type="album" id={id} client:only="react" />
                <PlayCircle strokeWidth={0.9} className="h-10 w-10" />
            </div>
            <img src={album.images[0].url} class="rounded-md" />
            <label class="pt-2 text-2xl font-semibold">{album.name}</label>

            <div class="text-xl font-semibold text-stone-400">
                {
                    album.artists.map((artist, index) => (
                        <label
                            class="hover:underline"
                            onclick={`event.preventDefault(); event.stopPropagation(); location.href='/artist/${artist.id}' `}
                        >
                            {`${artist.name}${index < album.artists.length - 1 ? "," : ""}`}
                        </label>
                    ))
                }
            </div>

            <!-- Meter arriba cuando esté: href={`/artist/${artist.id}`} -->
            <label class="text-sm text-stone-400"
                >{getDate(album.releaseDate)} | {album.songs.length} Songs | {
                    getMinutes(
                        songs.reduce((accumulator: number, song) => {
                            return accumulator + (song?.duration || 0);
                        }, 0)
                    )
                } Minutes</label
            >
        </div>
        <div
            class="min-w-0 max-w-full w-full min-h-0 max-h-full h-full overflow-auto flex flex-col gap-y-4 pr-6"
        >
            {
                discs.map((discSongs, discIndex) => {
                    return (
                        <>
                            <label class="text-neutral-400 font-semibold flex flex-row gap-2 items-center">
                                <Disc className="h-5 w-5" />
                                Disc {discIndex + 1}
                            </label>

                            {discSongs.map((song, songIndex) => {
                                if (song) {
                                    return (
                                        <AlbumSong
                                            song={song}
                                            index={songIndex}
                                            client:only="react"
                                            albumId={id}
                                        />
                                    );
                                } else {
                                    return <div>Song is undefined</div>;
                                }
                            })}
                        </>
                    );
                })
            }
            <!--<div class="min-h-56"></div>-->
        </div>
    </div>
</Layout>
