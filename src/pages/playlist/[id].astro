---
import Layout from "@/layouts/Layout.astro";
import {
    db,
    type SongDB,
    type RawSongDB,
    parsePlaylist,
    parseSong,
    type RawPlaylistDB,
    type UserDB,
    parseUser,
    type RawUserDB,
} from "@/lib/db";
import PlaylistSong from "@/components/PlaylistSong";
import PlaylistHeader from "@/components/playlistHeader.astro";

const { id } = Astro.params as { id: string };
if (!Astro.locals.user) {
    return Astro.redirect("/login");
}
let playlist;
let inDatabase;

if (id == "liked") {
    const userDB = parseUser(
        db
            .prepare("SELECT likedSongs FROM user WHERE id = ?")
            .get(Astro.locals.user.id) as RawUserDB
    ) as UserDB<"likedSongs">;

    playlist = {
        name: "Liked",
        songs: userDB.likedSongs.map((song) => song),
        image: "",
        images: [{ url: "/song-placeholder.png" }],
        owner: "",
    };
} else {
    playlist = parsePlaylist(
        db
            .prepare("SELECT * FROM playlist WHERE id = ?")
            .get(id) as RawPlaylistDB
    );
}

if (playlist) {
    inDatabase = true;
} else {
    return new Response(
        JSON.stringify({
            error: "",
        }),
        {
            status: 404,
        }
    );
}

const songs = playlist.songs
    .map(
        (
            song
        ):
            | SongDB<
                  | "name"
                  | "albumId"
                  | "duration"
                  | "artists"
                  | "path"
                  | "albumName"
                  | "image"
                  | "id"
                  | "images"
              >
            | undefined => {
            return parseSong(
                db
                    .prepare(
                        "SELECT name, albumId, duration, artists, path, albumName, image, images, id FROM song WHERE id = ?"
                    )
                    .get(song.id) as RawSongDB
            );
        }
    )
    .filter(
        (
            song
        ): song is SongDB<
            | "id"
            | "images"
            | "image"
            | "name"
            | "albumId"
            | "duration"
            | "artists"
            | "path"
            | "albumName"
        > => song !== undefined
    );
---

<Layout
    title={playlist.name + " â€¢ Rock It!"}
    currentPage=""
    bgImage={`/api/image/${playlist.image}`}
>
    <div class="pl-4 pr-2 flex md:flex-row flex-col w-full h-full relative">
        <PlaylistHeader
            id={id}
            playlist={playlist}
            songs={songs}
            inDatabase={inDatabase}
            className="hidden md:flex"
        />
        <div
            class="min-w-0 max-w-full w-full min-h-0 max-h-full h-full overflow-auto flex flex-col gap-y-1 pr-6"
        >
            <PlaylistHeader
                id={id}
                playlist={playlist}
                songs={songs}
                inDatabase={inDatabase}
                className="md:hidden flex"
            />
            {
                songs.map((song) => {
                    if (song) {
                        return (
                            <PlaylistSong
                                song={song}
                                playlistId={id}
                                client:only="react"
                            />
                        );
                    } else {
                        return <div>Song is undefined</div>;
                    }
                })
            }
            <div class="min-h-20 block"></div>
        </div>
    </div>
</Layout>
