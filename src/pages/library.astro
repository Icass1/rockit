---
import Layout from "@/layouts/Layout.astro";
import LibraryFilters from "@/components/LibraryFilters.tsx";
import ButtonSection from "@/components/MobileLibraryButtons.tsx";
import {
    db,
    parseAlbum,
    parsePlaylist,
    parseUser,
    type AlbumDB,
    type PlaylistDB,
    type RawAlbumDB,
    type RawPlaylistDB,
    type RawUserDB,
} from "@/lib/db";
import { getStats } from "@/lib/stats";
import { useState } from "react";
import { Heart, Disc3, History } from "lucide-react";
import Downloads from "@/components/MusicDownloader.tsx";

if (!Astro.locals.user) {
    return Astro.redirect("/login");
}

const userLists = parseUser(
    db
        .prepare("SELECT lists FROM user WHERE id = ?")
        .get(Astro.locals.user.id) as RawUserDB
)?.lists;

if (!userLists) {
    return new Response("Fatal error, userLists is undefined");
}

let playlists: PlaylistDB[] = [];
let albums: AlbumDB[] = [];
if (userLists?.filter((list) => list.type == "playlist").length > 0) {
    const playlistsQuery = `SELECT * FROM playlist WHERE id = ${userLists
        ?.filter((list) => list.type == "playlist")
        .map((list) => `'${list.id}'`)
        .join(" OR id = ")}`;
    playlists = (db.prepare(playlistsQuery).all() as RawPlaylistDB[]).map(
        (playlist: RawPlaylistDB) => parsePlaylist(playlist) as PlaylistDB
    );
}
if (userLists?.filter((list) => list.type == "album").length > 0) {
    const albumsQuery = `SELECT * FROM album WHERE id = ${userLists
        ?.filter((list) => list.type == "album")
        .map((list) => `'${list.id}'`)
        .join(" OR id = ")}`;
    albums = (db.prepare(albumsQuery).all() as RawAlbumDB[]).map(
        (album) => parseAlbum(album) as AlbumDB
    );
}

const data = await getStats(Astro.locals.user.id);
data.albums.sort((a, b) => b.timesPlayed - a.timesPlayed);
---

<Layout title="Library • Rock It!" currentPage="Library">
    <div class="mt-20 md:mt-0"></div>
    <div class="md:p-8 h-full">
        <section class="items-center justify-between flex px-10 md:px-0">
            <div class="hidden md:flex">
                <label class="text-white text-4xl font-bold">Library</label>
            </div>
            <LibraryFilters client:only="react" />
        </section>

        <section class="pt-5 md:py-12 text-white">
            <h2 class="text-2xl font-bold text-left px-5 md:px-0">
                Featured Albums
            </h2>
            <div
                class="relative flex items-center gap-5 overflow-y-auto md:overflow-x-auto py-4 md:px-2 "
                style="scrollbar-gutter: stable both-edges;"
            >
                <!-- Aquí creamos las canciones -->

                <a
                    href={`/playlist/liked`}
                    class="library-item flex-none w-[calc(40%-10px)] md:w-48 md:hover:scale-105 transition ml-8 md:ml-0"
                >
                    <div
                        class="relative rounded-lg w-full aspect-square object-cover"
                        style="background-image:url(/RockitBackground.png); background-size: cover;"
                    >
                        <Heart
                            className="w-1/2 h-1/2 absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2"
                            fill="white"
                        />
                    </div>
                    <label
                        class="truncate font-semibold text-center block mt-2"
                    >
                        Liked Songs
                    </label>
                    <label
                        class="truncate text-sm text-center text-gray-400 block"
                    >
                        by Rock It!
                    </label>
                </a>

                <a
                    href={`/playlist/liked`}
                    class="library-item flex-none w-[calc(40%-10px)] md:w-48 md:hover:scale-105 transition"
                >
                    <div
                        class="relative rounded-lg w-full aspect-square object-cover"
                        style="background-image:url(/RockitBackground.png); background-size: cover;"
                    >
                        <Disc3
                            className="w-1/2 h-1/2 absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2"
                        />
                    </div>
                    <label
                        class="truncate font-semibold text-center block mt-2"
                    >
                        Most Listened
                    </label>
                    <label
                        class="truncate text-sm text-center text-gray-400 block"
                    >
                        by Rock It!
                    </label>
                </a>

                <a
                    href={`/playlist/liked`}
                    class="library-item flex-none w-[calc(40%-10px)] md:w-48 md:hover:scale-105 transition"
                >
                    <div
                        class="relative rounded-lg w-full aspect-square object-cover"
                        style="background-image:url(/RockitBackground.png); background-size: cover;"
                    >
                        <History
                            className="w-1/2 h-1/2 absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2"
                        />
                    </div>
                    <label
                        class="truncate font-semibold text-center block mt-2"
                    >
                        Recent Mix
                    </label>
                    <label
                        class="truncate text-sm text-center text-gray-400 block"
                    >
                        by Rock It!
                    </label>
                </a>

                {
                    data.albums.slice(0, 4).map((album) => (
                        <a
                            href={`/album/${album.id}`}
                            class="library-item flex-none w-[calc(40%-10px)] md:w-48 md:hover:scale-105 transition"
                        >
                            <img
                                class="rounded-lg w-full aspect-square object-cover"
                                src={`/api/image/${album.image}`}
                                alt="Song Cover"
                            />
                            <label class="truncate font-semibold text-center block mt-2">
                                {album.name}
                            </label>
                            <label class="truncate text-sm text-center text-gray-400 block">
                                {album.artists.map((artist, index) => (
                                    <label
                                        class="md:hover:underline"
                                        onclick={`event.preventDefault(); event.stopPropagation(); location.href='/artist/${artist.id}' `}
                                    >
                                        {`${artist.name}${index < album.artists.length - 1 ? "," : ""}`}
                                    </label>
                                ))}
                            </label>
                        </a>
                    ))
                }
                <a class="min-w-1 min-h-1 text-transparent">a</a>
            </div>
        </section>

        <ButtonSection client:only="react" />

        <h2 class="text-2xl font-bold text-left py-4 px-5 md:px-0">
            Your Albums and Playlists
        </h2>
        <div class="grid gap-5 px-5">
            <style>
                .grid {
                    grid-template-columns: repeat(
                        auto-fill,
                        minmax(200px, 1fr)
                    );
                }
                @media (max-width: 768px) {
                    .grid {
                        grid-template-columns: repeat(
                            auto-fill,
                            minmax(40%, 1fr)
                        );
                    }
                }
            </style>
            {
                playlists.map((playlist) => {
                    if (!playlist) return <label>Playlist is undefined</label>;
                    return (
                        <a
                            href={`/playlist/${playlist.id}`}
                            class="w-fit h-fit flex flex-col min-w-0 max-w-full md:hover:scale-110 transition-transform library-item"
                        >
                            <img
                                class="rounded-md"
                                src={
                                    playlist.image
                                        ? `/api/image/${playlist.image}`
                                        : playlist.images[0]?.url
                                }
                            />
                            <label class="truncate font-semibold text-center">
                                {playlist.name}
                            </label>
                            <label class="truncate text-sm text-center text-gray-400">
                                {playlist.owner}
                            </label>
                        </a>
                    );
                })
            }

            {
                albums.map((album) => {
                    if (!album) return <label>Playlist is undefined</label>;
                    return (
                        <a
                            href={`/album/${album.id}`}
                            class="w-fit h-fit flex flex-col min-w-0 max-w-full md:hover:scale-105 transition-transform library-item"
                        >
                            <img
                                class="rounded-md"
                                src={
                                    album.image
                                        ? `/api/image/${album.image}`
                                        : album.images[0]?.url
                                }
                            />
                            <label class="truncate font-semibold text-center mt-1">
                                {album.name}
                            </label>
                            <div class="text-sm text-center flex flex-row text-gray-400 mx-auto">
                                {album.artists.map((artist, index) => (
                                    <label
                                        class="md:hover:underline truncate"
                                        onclick={`event.preventDefault(); event.stopPropagation(); location.href='/artist/${artist.id}' `}
                                    >
                                        {`${artist.name}${index < album.artists.length - 1 ? "," : ""}`}
                                    </label>
                                ))}
                            </div>
                        </a>
                    );
                })
            }
        </div>
        <div class="md:min-h-10 min-h-20"></div>
        <!-- <Downloads navOpen={true} client:only="react" /> -->
    </div>
</Layout>
