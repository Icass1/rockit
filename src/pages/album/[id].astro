---
import Layout from "@/layouts/Layout.astro";
import { db, type AlbumDB, type PlaylistDB, type SongDB } from "@/lib/db";
import AlbumSong from "@/components/AlbumSong";
import type { SpotifyAlbumArtist, SpotifyAlbumImage } from "@/types/spotify";
const { id } = Astro.params as { id: string };

const albumDB = db.prepare("SELECT * FROM album WHERE id = ?").get(id) as
    | AlbumDB
    | undefined;

if (!albumDB) {
    return new Response(
        JSON.stringify({
            error: "",
        }),
        {
            status: 404,
        },
    );
}

const album = {
    id: albumDB.id,
    type: albumDB.type,
    images: JSON.parse(albumDB.images),
    name: albumDB.name,
    releaseDate: albumDB.releaseDate,
    artists: JSON.parse(albumDB.artists),
    copyrights: JSON.parse(albumDB.copyrights),
    popularity: albumDB.popularity,
    genres: JSON.parse(albumDB?.genres),
    songs: JSON.parse(albumDB.songs),
    discCount: albumDB.discCount,
    dateAdded: albumDB.dateAdded,
};


const songs = album.songs.map((songID: string) => {
    const song = db
        .prepare("SELECT * FROM song WHERE id = ?")
        .get(songID) as SongDB;
    return {
        id: song.id,
        name: song.name,
        duration: song.duration,
        path: song.path,
        artists: JSON.parse(song.artists),
        images: JSON.parse(song.images),
        albumName: song.albumName,
        albumId: song.albumId,
    };
});

function getMinutes(seconds: number) {
    seconds = Math.round(seconds);

    if (typeof seconds !== "number" || isNaN(seconds)) {
        return "Invalid input";
    }

    // Calculate minutes and remaining seconds
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = Math.round(seconds % 60);

    // Format the result with leading zeros
    const formattedMinutes = String(minutes).padStart(2, "0");

    return `${formattedMinutes}`;
}

function getDate(date: string) {
    const dateSplit = date.split("-");

    return dateSplit[0];
}
---

<Layout title={album.name} currentPage="">
    <div
        class="p-4 g rid flex flex-row w-full h-full grid-cols-[min-content_1fr] relative"
    >
        <div
            class="flex flex-col gap-1 relative top-1/2 -translate-y-1/2 w-1/3 max-w-96 h-fit mx-10"
        >
            <label class="text-center text-xl font-semibold"
                >{
                    (album.artists as SpotifyAlbumArtist[]).map(
                        (artist) => artist.name,
                    )
                }</label
            >
            <img
                src={(album.images as SpotifyAlbumImage[])[0].url}
                class=""
                transition:name={`img-album-${album.id}`}
            />
            <label class="text-xl font-semibold">{album.name}</label>
            <label class="text-sm"
                >{getDate(album.releaseDate)} | {
                    (album.songs as string[]).length
                } Songs | {
                    getMinutes(
                        songs.reduce((accumulator: number, song) => {
                            return accumulator + (song?.duration || 0);
                        }, 0),
                    )
                } Minutes</label
            >
        </div>
        <div
            class="min-w-0 max-w-full w-full min-h-0 max-h-full h-full overflow-auto flex flex-col gap-y-4"
        >
            {
                songs.map((song, index) => {
                    if (song) {
                        return (
                            <AlbumSong
                                song={song}
                                index={index}
                                client:only="react"
                            />
                        );
                    } else {
                        return <div>Song is undefined</div>;
                    }
                })
            }
        </div>
    </div>
</Layout>
