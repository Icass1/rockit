---
import Layout from "@/layouts/Layout.astro";
import { db, parseSong, type RawSongDB, type SongDB } from "@/lib/db";
import { readFile } from "fs/promises";
import { PlayedSongs } from "@/lib/stats";
import { getMinutes, getTime } from "@/lib/getTime";

// **************************
// Replace with SELECT lastPlayedSong FROM user WHERE id = ?     context.locals.user.id
const fileBuffer = await readFile("lastPlayedSongs.json", "utf-8");
const lastPlayedSongs: {
    [key: string]: number[];
} = JSON.parse(fileBuffer);
// **************************

let songs: SongDB<
    "artists" | "id" | "name" | "duration" | "albumId" | "albumName"
>[] = [];

Array(Math.round(Object.keys(lastPlayedSongs).length / 900) + 1)
    .fill(0)
    .map((_, index) => {
        const query =
            "SELECT id,artists,duration,name,albumId,albumName FROM song WHERE id = " +
            Object.keys(lastPlayedSongs)
                .splice(index * 900, (index + 1) * 900)
                .map((key) => `'${key}'`)
                .join(" OR id = ");

        const tempSongs = (db.prepare(query).all() as RawSongDB[]).map(
            (song) =>
                parseSong(song) as SongDB<
                    | "artists"
                    | "id"
                    | "name"
                    | "duration"
                    | "albumId"
                    | "albumName"
                >
        );
        songs = [...songs, ...tempSongs];
    });

const start = new Date("2024-08-15T00:00:00").getTime();
const end = new Date("2024-09-15T00:00:00").getTime();

const data = PlayedSongs(lastPlayedSongs, songs, start, end);

const totalTimesPlayedSong = data.songs.length;
const totalMinutesListened = data.songs.reduce(
    (partialSum, a) => partialSum + a.duration,
    0
);
const totalTimePlayedAlbum = data.albums.reduce(
    (partialSum, a) => partialSum + a.timesPlayed,
    0
);
const totalTimePlayedArtist = data.artists.reduce(
    (partialSum, a) => partialSum + a.timesPlayed,
    0
);

const songPlayedPerDay: { [key: string]: number } = {};

data.songs.map((song) => {
    const date = new Date(song.timePlayed);
    const datePlayed = `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate() + 1}`;

    if (!songPlayedPerDay[datePlayed]) {
        songPlayedPerDay[datePlayed] = 0;
    }
    songPlayedPerDay[datePlayed] += 1;
});
console.log(songPlayedPerDay);
---

<Layout currentPage="Stats & Friends">
    <div class="p-4 flex flex-row gap-4">
        <div
            class="w-96 bg-gray-800 rounded-lg p-2 h-fit flex flex-col font-semibold"
        >
            <label>{totalTimesPlayedSong} songs listened</label>
            <label>{getMinutes(totalMinutesListened)} minutes listened</label>
        </div>
        <div
            class="w-96 bg-gray-800 rounded-lg p-2 h-fit flex flex-col font-semibold"
        >
            <label class="">Songs listened per day</label>
            <div class="relative h-56">
                <div
                    class="absolute left-0 right-0 top-0 bottom-0 bg-gradient-to-t from-[#ee1086] to-[#fb6467] rounded"
                    style={`clip-path: polygon(${Object.entries(songPlayedPerDay).map((song) => `${((new Date(song[0]).getTime() - start) / (end - start)) * 100}% ${song[1]}%`)}, 100% 100%, 0% 100%);`}
                >
                </div>
                {
                    Array(11)
                        .fill(0)
                        .map((_, index) => (
                            <div
                                class="bg-gray-600/50 absolute w-[1px] h-full"
                                style={`left: ${index * 10}%;`}
                            />
                        ))
                }
                {
                    Array(11)
                        .fill(0)
                        .map((_, index) => (
                            <div
                                class="bg-gray-600/50 absolute h-[1px] w-full"
                                style={`top: ${index * 10}%;`}
                            />
                        ))
                }
            </div>
        </div>
        <div class="w-96 bg-gray-800 rounded-lg p-2 h-fit">
            <label class="text-lg font-semibold">Most listened Albums</label>
            <table style="width: 100%;">
                <tbody class="w-full">
                    <tr>
                        <th class="w-1/3"></th>
                        <th></th>
                    </tr>
                    {
                        data.albums.slice(0, 15).map((album) => (
                            <tr>
                                <td class="max-w-1 truncate text-sm text-right ">
                                    <a
                                        class="hover:underline"
                                        href={`/album/${album.id}`}
                                    >
                                        {album.name}
                                    </a>
                                </td>
                                <td>
                                    <div class="mx-2">
                                        <div
                                            class="relative flex flex-row items-center "
                                            style="width: calc(100% - 30px);"
                                        >
                                            <div
                                                class="bg-gradient-to-r from-[#ee1086] to-[#fb6467] h-1 block rounded"
                                                style={`width: calc(${
                                                    (album.timesPlayed /
                                                        data.albums[0]
                                                            .timesPlayed) *
                                                    100
                                                }%)`}
                                            />
                                            <label
                                                class="absolute font-bold  px-1 text-xs text-left"
                                                style={`left: min(calc(${
                                                    (album.timesPlayed /
                                                        data.albums[0]
                                                            .timesPlayed) *
                                                    100
                                                }% + 4px))`}
                                            >
                                                {Math.round(
                                                    (album.timesPlayed /
                                                        totalTimePlayedAlbum) *
                                                        100
                                                ) + "%"}
                                            </label>
                                        </div>
                                    </div>
                                </td>
                            </tr>
                        ))
                    }
                </tbody>
            </table>
        </div>

        <div class="w-96 bg-gray-800 rounded-lg p-2 h-fit">
            <label class="text-lg font-semibold">Most listened Artists</label>
            <table style="width: 100%;">
                <tbody class="w-full">
                    <tr>
                        <th class="w-1/3"></th>
                        <th></th>
                    </tr>
                    {
                        data.artists.slice(0, 20).map((artist) => (
                            <tr>
                                <td class="max-w-1 truncate text-sm text-right ">
                                    <a
                                        class="hover:underline"
                                        href={`/artist/${artist.id}`}
                                    >
                                        {artist.name}
                                    </a>
                                </td>
                                <td>
                                    <div class="mx-2">
                                        <div
                                            class="relative flex flex-row items-center "
                                            style="width: calc(100% - 30px);"
                                        >
                                            <div
                                                class="bg-gradient-to-r from-[#ee1086] to-[#fb6467] h-1 block rounded"
                                                style={`width: calc(${
                                                    (artist.timesPlayed /
                                                        data.artists[0]
                                                            .timesPlayed) *
                                                    100
                                                }%)`}
                                            />
                                            <label
                                                class="absolute font-bold  px-1 text-xs text-left"
                                                style={`left: min(calc(${
                                                    (artist.timesPlayed /
                                                        data.artists[0]
                                                            .timesPlayed) *
                                                    100
                                                }% + 4px))`}
                                            >
                                                {Math.round(
                                                    (artist.timesPlayed /
                                                        totalTimePlayedArtist) *
                                                        100
                                                ) + "%"}
                                            </label>
                                        </div>
                                    </div>
                                </td>
                            </tr>
                        ))
                    }
                </tbody>
            </table>
        </div>
    </div>
</Layout>
