---
import Layout from "@/layouts/Layout.astro";
import SongsCarousel from "@/components/Home/SongsCarousel";
import RecentlyPlayedSong from "@/components/Home/RecentlyPlayedSong";
import QuickSelectionsSong from "@/components/Home/QuickSelectionsSong";
import { getStats, type SongForStats, type Stats } from "@/lib/stats";
import { getLang } from "@/lib/getLang";
import {
    parsePlaylist,
    type PlaylistDB,
    type RawPlaylistDB,
} from "@/lib/db/playlist";
import { parseAlbum, type AlbumDB, type RawAlbumDB } from "@/lib/db/album";
import { parseUser, type RawUserDB, type UserDBList } from "@/lib/db/user";
import { db } from "@/lib/db/db";
import { getImageUrl } from "@/lib/getImageUrl";

const lang = getLang(Astro.locals.user?.lang ?? "en");

// Type guard para verificar si es un AlbumDB
function isAlbum(list: PlaylistDB | AlbumDB): list is AlbumDB {
    return (list as AlbumDB).artists !== undefined;
}

let stats: Stats;

if (Astro.locals.user?.id) stats = await getStats(Astro.locals.user.id);
else stats = { albums: [], songs: [], artists: [] };

const songsLast7Days: SongForStats[] = [];
const songsLastMonth: SongForStats[] = [];
const songsTimesPlayed: SongForStats[] = [];
let combinedLists: (PlaylistDB | AlbumDB)[] = [];

const sevenDaysAgo = Date.now() - 7 * 24 * 60 * 60 * 1000;
const lastMonth = Date.now() - 30 * 24 * 60 * 60 * 1000;

const songsByTimePlayed = [...stats.songs];
songsByTimePlayed.sort((a, b) => b.timePlayed - a.timePlayed);

stats.songs.map((song) => {
    let result = songsTimesPlayed.find((findSong) => findSong.id == song.id);
    if (result) {
        result.timesPlayed += 1;
    } else {
        songsTimesPlayed.push({
            artists: song.artists,
            image: song.image,
            index: 0,
            name: song.name,
            id: song.id,
            timesPlayed: 1,
            duration: song.duration,
            images: song.images,
            albumId: song.albumId,
            albumName: song.albumName,
        });
    }
});

// Filter songs for last week
stats.songs
    .filter((song) => {
        return song.timePlayed >= sevenDaysAgo;
    })
    .map((song) => {
        let result = songsLast7Days.find((findSong) => findSong.id == song.id);
        if (result) {
            result.timesPlayed += 1;
        } else {
            songsLast7Days.push({
                artists: song.artists,
                image: song.image,
                index: 0,
                name: song.name,
                id: song.id,
                timesPlayed: 1,
                duration: song.duration,
                images: song.images,
                albumId: song.albumId,
                albumName: song.albumName,
            });
        }
    });

// Filter songs for last month
stats.songs
    .filter((song) => {
        return song.timePlayed >= lastMonth;
    })
    .map((song) => {
        let result = songsLastMonth.find((findSong) => findSong.id == song.id);
        if (result) {
            result.timesPlayed += 1;
        } else {
            songsLastMonth.push({
                artists: song.artists,
                image: song.image,
                index: 0,
                name: song.name,
                id: song.id,
                timesPlayed: 1,
                duration: song.duration,
                images: song.images,
                albumId: song.albumId,
                albumName: song.albumName,
            });
        }
    });

// Get User Library Items
let userLists: UserDBList[] | undefined = [];
if (Astro.locals.user?.id) {
    userLists = parseUser(
        db
            .prepare("SELECT lists FROM user WHERE id = ?")
            .get(Astro.locals.user.id) as RawUserDB
    )?.lists;
}
if (!userLists) {
    return new Response("Fatal error, userLists is undefined");
}

// Get playlists
if (userLists?.filter((list) => list.type == "playlist").length > 0) {
    const playlistsQuery = `SELECT * FROM playlist WHERE id = ${userLists
        ?.filter((list) => list.type == "playlist")
        .map((list) => `'${list.id}'`)
        .join(" OR id = ")}`;
    const playlists = (db.prepare(playlistsQuery).all() as RawPlaylistDB[]).map(
        (playlist: RawPlaylistDB) => parsePlaylist(playlist) as PlaylistDB
    );
    combinedLists = combinedLists.concat(playlists);
}

// Get albums
if (userLists?.filter((list) => list.type == "album").length > 0) {
    const albumsQuery = `SELECT * FROM album WHERE id = ${userLists
        ?.filter((list) => list.type == "album")
        .map((list) => `'${list.id}'`)
        .join(" OR id = ")}`;
    const albums = (db.prepare(albumsQuery).all() as RawAlbumDB[]).map(
        (album) => parseAlbum(album) as AlbumDB
    );
    combinedLists = combinedLists.concat(albums);
}

// Mix the songs
const shuffleArray = (array: SongForStats[]): SongForStats[] => {
    for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
    }
    return array;
};

// Get the final Lists
songsTimesPlayed.sort((a, b) => b.timesPlayed - a.timesPlayed);
const randomSongsLast7Days = shuffleArray([...songsLast7Days]);
const randomSongsLastMonth = shuffleArray([...songsLastMonth]);
const shuffledLists = combinedLists.sort(() => Math.random() - 0.5);
---

<Layout title="Rock It!" currentPage="Home">
    <div class="mt-20 md:mt-0"></div>

    <!-- Albums Carousel Section -->
    <SongsCarousel
        songsTimesPlayed={randomSongsLast7Days}
        client:only="react"
    />

    <!-- <section class="md:mt-12 text-center">
        <h2 class="text-3xl font-bold text-white mb-8">
            Explore by Category (üèóÔ∏è In Progess üèóÔ∏è)
        </h2>
        <div class="flex justify-center gap-3 flex-wrap">
            {
                categories.map((category) => (
                    <div class="group relative cursor-pointer">
                        <div
                            class={`w-28 h-10 flex items-center justify-center rounded-full bg-cover bg-center transition duration-300`}
                            style={{
                                backgroundImage: `url(${category.image})`,
                            }}
                        >
                            <p class="text-white text-lg font-semibold z-10">
                                {category.label}
                            </p>
                            {/* Capa superpuesta negra al hacer hover */}
                            <div class="absolute inset-0 bg-black rounded-full opacity-40 group-hover:opacity-20 transition duration-300 pointer-events-none" />
                        </div>
                    </div>
                ))
            }
        </div>
    </section> -->

    <section class="md:px-12 py-5 md:py-12 text-white">
        <h2 class="text-2xl md:text-3xl font-bold text-left px-5 md:px-0">
            {lang.recent_played}
        </h2>
        <div
            class="relative flex items-center gap-4 overflow-x-auto py-4 px-8 md:px-2"
            style="scrollbar-gutter: stable both;"
        >
            <!-- Aqu√≠ creamos las canciones -->
            {
                songsByTimePlayed
                    .slice(0, 20)
                    .map((song) => (
                        <RecentlyPlayedSong
                            client:only="react"
                            song={song}
                            songs={songsByTimePlayed.slice(0, 20)}
                        />
                    ))
            }
        </div>
    </section>

    <section class="group md:px-12 text-white">
        <h2 class="text-2xl md:text-3xl font-bold text-left px-5 md:px-0">
            {lang.quick_selections}
        </h2>
        <!-- Contenedor del slider -->
        <div
            class="flex md:gap-4 overflow-x-auto scrollbar-hide snap-x snap-mandatory py-4 px-8 md:px-2 md:[scrollbar-gutter:stable]"
        >
            {/* Aqu√≠ creamos las columnas din√°micamente */}
            {
                // Dividir las canciones en columnas de 4 canciones por columna
                Array.from({ length: 9 }).map((_, columnIndex) => (
                    <div class="flex flex-col gap-1 flex-none w-[51%] max-w-[200px] md:w-[calc(25%-10px)] md:max-w-[350px] snap-center">
                        {
                            // Asignar las canciones a cada columna
                            randomSongsLastMonth
                                .slice(columnIndex * 4, columnIndex * 4 + 4)
                                .map((song) => (
                                    <QuickSelectionsSong
                                        client:only="react"
                                        song={song}
                                        songs={randomSongsLastMonth.slice(
                                            0,
                                            8 * 4 + 4
                                        )}
                                    />
                                ))
                        }
                    </div>
                ))
            }
        </div>
    </section>

    <section class="md:px-12 py-5 md:py-12 text-white">
        <h2 class="text-2xl md:text-3xl font-bold text-left px-5 md:px-0">
            Lists from your Library
        </h2>
        <div
            class="relative flex items-center gap-4 overflow-x-auto py-4 px-8 md:px-2 md:[scrollbar-gutter:stable]"
        >
            <!-- Aqu√≠ creamos las canciones -->
            {
                shuffledLists.slice(0, 20).map((list) => (
                    <a
                        href={
                            isAlbum(list)
                                ? `/album/${list.id}`
                                : `/playlist/${list.id}`
                        }
                        class="flex-none w-40 md:w-48 md:hover:scale-105 transition"
                    >
                        <img
                            class="rounded-lg w-full aspect-square object-cover"
                            src={getImageUrl({
                                imageId: list.image,
                                height: 400,
                                width: 400,
                                placeHolder: "/song-placeholder.png",
                            })}
                            alt="Song Cover"
                        />
                        <label class="truncate font-semibold text-center block mt-2">
                            {list.name}
                        </label>
                        <label class="truncate text-sm text-center text-gray-400 block">
                            {isAlbum(list) ? list.artists[0]?.name : list.owner}
                        </label>
                    </a>
                ))
            }
        </div>
    </section>

    <section class="md:px-12 py-5 md:py-12 text-white">
        <h2 class="text-2xl md:text-3xl font-bold text-left px-5 md:px-0">
            Other Users Also Listen to
        </h2>
        <div
            class="relative flex items-center gap-4 overflow-x-auto py-4 px-8 md:px-2 md:[scrollbar-gutter:stable]"
        >
            <!-- Aqu√≠ creamos las canciones -->
            {
                Array.from({ length: 20 }).map((_, index) => (
                    <a
                        href="#"
                        class="flex-none w-40 md:w-48 md:hover:scale-105 transition"
                    >
                        <img
                            class="rounded-lg w-full aspect-square object-cover"
                            src="/song-placeholder.png"
                            alt="Song Cover"
                        />
                        <label class="truncate font-semibold text-center block mt-2">
                            Song Title {index + 1}
                        </label>
                        <label class="truncate text-sm text-center text-gray-400 block">
                            Artist Name
                        </label>
                    </a>
                ))
            }
        </div>
    </section>

    <section class="md:px-12 py-5 md:py-12 text-white">
        <h2 class="text-2xl md:text-3xl font-bold text-left px-5 md:px-0">
            You Might Also Like (Recommendations In Progress)
        </h2>
        <div
            class="relative flex items-center gap-4 overflow-x-auto py-4 px-8 md:px-2 md:[scrollbar-gutter:stable]"
        >
            <!-- Aqu√≠ creamos las canciones -->
            {
                Array.from({ length: 20 }).map((_, index) => (
                    <a
                        href="#"
                        class="flex-none w-40 md:w-48 md:hover:scale-105 transition"
                    >
                        <img
                            class="rounded-lg w-full aspect-square object-cover"
                            src="/song-placeholder.png"
                            alt="Song Cover"
                        />
                        <label class="truncate font-semibold text-center block mt-2">
                            Song Title {index + 1}
                        </label>
                        <label class="truncate text-sm text-center text-gray-400 block">
                            Artist Name
                        </label>
                    </a>
                ))
            }
        </div>
    </section>
    <div class="min-h-10"></div>
</Layout>
