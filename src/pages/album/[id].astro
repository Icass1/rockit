---
import Layout from "@/layouts/Layout.astro";
import AlbumSong from "@/components/AlbumSong";
import { Disc,BadgeCheck } from "lucide-react";

import { getMinutes } from "@/lib/getTime";

import PinList from "@/components/PinList";
import AddToLibrary from "@/components/AddToLibrary";
import DownloadList from "@/components/DownloadList";
import getAlbum from "@/lib/getAlbum";
import PlayList from "@/components/PlayList";
import AddToQueue from "@/components/AddToQueue";

const { id } = Astro.params as { id: string };

// if (!Astro.locals.user) {
//     return Astro.redirect("/login");
// }

let _album = await getAlbum(id);

if (_album == "error connecting to backend") {
    throw "Error connecting to backend";
} else if (_album == "not found") {
    return new Response("Ablum not found", { status: 404 });
}

const { album, discs, songs, inDatabase } = _album;

function getDate(date: string) {
    const dateSplit = date.split("-");

    return dateSplit[0];
}

const meta = {
    "og:site_name": "Rockit",
    site_name: "Rockit",
    "og:title": album.name,
    title: album.name,
    description: `${album.artists.map((artist) => artist.name)} • Album • ${album.releaseDate} • ${album.songs.length} songs`,
    "og:description": `${album.artists.map((artist) => artist.name)} • Album • ${album.releaseDate} • ${album.songs.length} songs`,
    "og:url": `https://rockit.rockhosting.org/album/${id}`,
    "og:type": "music.album",
    "og:image": album.image
        ? `https://rockit.rockhosting.org/api/image/${album.image}`
        : album.images[0].url,
};
---

<Layout
    title={album.name + " • Rock It!"}
    currentPage="Album"
    meta={meta}
    bgImage={`/api/image/blur/${album.image}`}
>
    <div
        class="pl-4 g rid flex flex-row w-full h-full grid-cols-[min-content_1fr] relative pr-2"
    >
        <div class="flex flex-col gap-1 relative top-1/2 -translate-y-1/2 w-full max-w-md h-fit mx-10">
            <!-- Contenedor de la imagen cuadrada -->
            <div class="relative mx-auto overflow-hidden aspect-square rounded-md h-2/3">
                <img
                    src={album.image ? `/api/image/${album.image}` : album.images[0].url}
                    class="w-full h-[40vh] object-fill"
                />
            </div>
            
            <!-- Div con los iconos -->
            <div class="flex flex-row justify-center gap-3 text-sm pt-2">
                {
                    !inDatabase && (
                        <DownloadList
                            url={`https://open.spotify.com/album/${id}`}
                            client:only="react"
                        />
                    )
                }
                <PinList type="album" id={id} client:only="react" />
                <AddToLibrary type="album" id={id} client:only="react" />
                <PlayList client:only="react" type="album" id={id} />
                <AddToQueue client:only="react" type="album" id={id} />
            </div>
        
            <!-- Nombre del álbum -->
            <label class="text-2xl font-semibold line-clamp-2">{album.name}</label>
        
            <!-- Artistas -->
            <div class="text-xl font-semibold text-stone-400 flex">
                {
                    album.artists.map((artist, index) => (
                        <span class="flex items-center space-x-1">
                            <label
                                class="md:hover:underline line-clamp-2"
                                onclick={`event.preventDefault(); event.stopPropagation(); location.href='/artist/${artist.id}' `}
                            >
                                {`${artist.name}${index < album.artists.length - 1 ? ", " : ""}`}
                            </label>
                        </span>
                    ))
                }
            </div>
            
            <!-- Información adicional -->
            <label class="text-sm text-stone-400">
                {getDate(album.releaseDate)} | {album.songs.length} Songs | {
                    getMinutes(
                        songs.reduce((accumulator: number, song) => {
                            return accumulator + (song?.duration || 0);
                        }, 0)
                    )
                } Minutes
            </label>
        </div>    
    
        <div
            class="min-w-0 max-w-full w-full min-h-0 max-h-full h-full overflow-auto flex flex-col pr-6"
        >
            {
                discs.map((discSongs, discIndex) => {
                    return (
                        <>
                            <label class="text-neutral-400 font-semibold flex flex-row gap-2 items-center text-lg mb-2">
                                <Disc className="h-6 w-6" />
                                Disc {discIndex + 1}
                            </label>

                            {discSongs.map((song, songIndex) => {
                                if (song) {
                                    return (
                                        <AlbumSong
                                            song={song}
                                            index={songIndex}
                                            client:only="react"
                                            albumId={id}
                                        />
                                    );
                                } else {
                                    return <div>Song is undefined</div>;
                                }
                            })}
                        </>
                    );
                })
            }
            <div class="min-h-10"></div>
        </div>
    </div>
</Layout>
