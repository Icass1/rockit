---
import Layout from "@/layouts/Layout.astro";
import {
    db,
    type SongDB,
    type RawSongDB,
    parsePlaylist,
    parseSong,
    type RawPlaylistDB,
    type UserDB,
    parseUser,
    type RawUserDB,
} from "@/lib/db";
import PlaylistSong from "@/components/PlaylistSong";
import PinList from "@/components/PinList";
import AddToLibrary from "@/components/AddToLibrary";
import { Download, ArrowLeft } from "lucide-react";
import PlayList from "@/components/PlayList";
import AddToQueue from "@/components/AddToQueue";

const { id } = Astro.params as { id: string };
if (!Astro.locals.user) {
    return Astro.redirect("/login");
}
let playlist;
let inDatabase;

if (id == "liked") {
    const userDB = parseUser(
        db
            .prepare("SELECT likedSongs FROM user WHERE id = ?")
            .get(Astro.locals.user.id) as RawUserDB
    ) as UserDB<"likedSongs">;

    playlist = {
        name: "Liked",
        songs: userDB.likedSongs.map((song) => song),
        image: "",
        images: [{ url: "/song-placeholder.png" }],
    };
} else {
    playlist = parsePlaylist(
        db
            .prepare("SELECT * FROM playlist WHERE id = ?")
            .get(id) as RawPlaylistDB
    );
}

if (playlist) {
    inDatabase = true;
} else {
    return new Response(
        JSON.stringify({
            error: "",
        }),
        {
            status: 404,
        }
    );
}

const songs = playlist.songs
    .map(
        (
            song
        ):
            | SongDB<
                  | "name"
                  | "albumId"
                  | "duration"
                  | "artists"
                  | "path"
                  | "albumName"
                  | "image"
                  | "id"
                  | "images"
              >
            | undefined => {
            return parseSong(
                db
                    .prepare(
                        "SELECT name, albumId, duration, artists, path, albumName, image, images, id FROM song WHERE id = ?"
                    )
                    .get(song.id) as RawSongDB
            );
        }
    )
    .filter(
        (
            song
        ): song is SongDB<
            | "id"
            | "images"
            | "image"
            | "name"
            | "albumId"
            | "duration"
            | "artists"
            | "path"
            | "albumName"
        > => song !== undefined
    );

function getMinutes(seconds: number) {
    seconds = Math.round(seconds);

    if (typeof seconds !== "number" || isNaN(seconds)) {
        return "Invalid input";
    }

    // Calculate minutes and remaining seconds
    const minutes = Math.floor(seconds / 60);

    // Format the result with leading zeros
    const formattedMinutes = String(minutes).padStart(2, "0");

    return `${formattedMinutes}`;
}
---

<Layout
    title={playlist.name + " â€¢ Rock It!"}
    currentPage=""
    bgImage={`/api/image/${playlist.image}`}
>
    <div
        class="pl-4 pr-2 g rid flex flex-row w-full h-full grid-cols-[min-content_1fr] relative"
    >
        <div
            class="flex flex-col gap-1 relative top-1/2 -translate-y-1/2 w-1/3 max-w-96 h-fit mx-10"
        >
            <div class="flex flex-row gap-2 mb-2">
                {
                    !inDatabase && (
                        <Download strokeWidth={0.9} className="h-10 w-10" />
                    )
                }
                <PinList type="playlist" id={id} client:only="react" />
                <AddToLibrary type="playlist" id={id} client:only="react" />
                <PlayList
                    client:only="react"
                    songs={songs}
                    type="playlist"
                    id={id}
                />
                <AddToQueue
                    client:only="react"
                    songs={songs}
                    type="playlist"
                    id={id}
                />
            </div>
            <img
                src={playlist.image
                    ? `/api/image/${playlist.image}`
                    : playlist.images[0].url}
                class="rounded-md"
            />
            <label class="pt-2 text-2xl font-semibold">{playlist.name}</label>
            <label
                class="text-xl font-semibold text-stone-400 md:hover:underline cursor-pointer"
                >{playlist.owner}</label
            >
            <label class="text-sm text-stone-400"
                >{playlist.songs.length} Songs | {
                    getMinutes(
                        songs.reduce((accumulator: number, song) => {
                            return accumulator + (song?.duration || 0);
                        }, 0)
                    )
                } Minutes</label
            >
        </div>
        <div
            class="min-w-0 max-w-full w-full min-h-0 max-h-full h-full overflow-auto flex flex-col gap-y-1 pr-6"
        >
            {
                songs.map((song) => {
                    if (song) {
                        return (
                            <PlaylistSong
                                song={song}
                                playlistId={id}
                                client:only="react"
                            />
                        );
                    } else {
                        return <div>Song is undefined</div>;
                    }
                })
            }
        </div>
    </div>
</Layout>
