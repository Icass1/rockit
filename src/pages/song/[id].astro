---
import Layout from "@/layouts/Layout.astro";
import { db, parseSong, type RawSongDB, type SongDB } from "@/lib/db";
import getAlbum from "@/lib/getAlbum";
import { getTime } from "@/lib/getTime";
import LikeButton from "@/components/LikeButton";

import type {
    SpotifyArtistTopTracks,
    SpotifyArtist,
    SpotifyTrack,
} from "@/types/spotify";

import SongPageCover from "@/components/SongPageCover";
import { ENV } from "@/rockitEnv";
import { EllipsisVertical } from 'lucide-react';

const { id } = Astro.params as { id: string };

let inDatabase;
let song:
    | SongDB<
          | "id"
          | "albumId"
          | "artists"
          | "name"
          | "lyrics"
          | "image"
          | "path"
          | "images"
          | "albumName"
          | "duration"
      >
    | undefined;
let artistSongs;
let album;
let artist: SpotifyArtist | undefined;
song = parseSong(
    db.prepare("SELECT * FROM song WHERE id = ?").get(id) as RawSongDB
);

const BACKEND_URL = ENV.BACKEND_URL;

if (song) {
    inDatabase = true;

    const _album = await getAlbum(song?.albumId);
    if (_album == "error connecting to backend") {
    } else if (_album == "not found") {
    } else {
        album = _album;
    }
} else {
    inDatabase = false;
    let response;

    response = await fetch(`${BACKEND_URL}/song/${id}`, {
        signal: AbortSignal.timeout(2000),
    });
    if (response.ok) {
        const spotifySong = (await response.json()) as SpotifyTrack;
        song = {
            id: spotifySong.id,
            image: "",
            albumId: spotifySong.album.id,
            artists: spotifySong.artists,
            name: spotifySong.name,
            lyrics: "",
            path: "",
            images: spotifySong.album.images,
            albumName: spotifySong.album.name,
            duration: spotifySong.duration_ms / 1000,
        };
    } else {
        return new Response("Song not found", { status: 404 });
    }
    const _album = await getAlbum(song.albumId);
    if (_album == "error connecting to backend") {
    } else if (_album == "not found") {
    } else {
        album = _album;
    }
}

if (!album) {
    throw "Album not found";
}

let response;

response = await fetch(
    `${BACKEND_URL}/artist-top-songs/${song.artists[0].id}`,
    {
        signal: AbortSignal.timeout(2000),
    }
);
if (response.ok) {
    artistSongs = (await response.json()) as SpotifyArtistTopTracks;
}

response = await fetch(`${BACKEND_URL}/artist/${song.artists[0].id}`, {
    signal: AbortSignal.timeout(2000),
});
if (response.ok) {
    artist = await response.json();
}

const meta = {
    "og:site_name": "Rockit",
    site_name: "Rockit",
    "og:title": song.name,
    title: song.name,
    description: `${song.artists.map((artist) => artist.name)} • Song`,
    "og:description": `${song.artists.map((artist) => artist.name)} • Song`,
    "og:url": `https://rockit.rockhosting.org/song/${id}`,
    "og:type": "music.song",
    "og:image": song.image
        ? `https://rockit.rockhosting.org/api/image/${song.image}`
        : song.images[0].url,
};
---

<Layout
    title={song.name + " • Rock It!"}
    currentPage="Song"
    meta={meta}
    bgImage={`/api/image/blur/${song.image}`}
>
    <div class="w-full mx-auto px-6 pb-6">
        <!-- Header con botones y carátula -->
        <div class="w-full mx-auto p-6 grid grid-cols-3 gap-4 items-center">
            <!-- Columna izquierda: Artista -->
            <div class="flex flex-col items-center justify-center">
                <div
                    class="flex items-center bg-gray-200 p-4 rounded-lg shadow-md w-full max-w-sm"
                >
                    <!-- Foto del artista -->
                    <div
                        class="w-32 h-32 bg-gray-300 rounded-full overflow-hidden flex-shrink-0"
                    >
                        <img
                            src={artist?.images[0].url ||
                                "/user-placeholder.png"}
                            alt="Artista"
                            class="w-full h-full object-cover"
                        />
                    </div>
                    <!-- Nombre del artista -->
                    <div class="ml-4">
                        <a
                            class="text-2xl font-bold text-gray-800 text-left md:hover:underline md:hover:cursor-pointer"
                            href={`/artist/${song?.artists[0].id}`}
                        >
                            {song?.artists[0].name}
                        </a>
                        {
                            song?.artists.slice(1).length ? (
                                <div class="text-gray-600 text-md font-semibold text-left">
                                    ft.{" "}
                                    {song?.artists
                                        .slice(1)
                                        .map((artist, index) => (
                                            <a
                                                href={`/artist/${artist.id}`}
                                                class="md:hover:underline"
                                            >
                                                {artist.name +
                                                    (index <
                                                    song.artists.slice(1)
                                                        .length -
                                                        1
                                                        ? ","
                                                        : "")}
                                            </a>
                                        ))}
                                </div>
                            ) : (
                                <div />
                            )
                        }
                    </div>
                </div>
            </div>

            <!-- Columna central: Canción -->
            <div class="flex flex-col items-center justify-center">
                <!-- Imagen de la canción -->
                <SongPageCover
                    song={song}
                    album={album}
                    inDatabase={inDatabase}
                    client:only="react"
                />
                
                <!-- Nombre de la canción -->
                <h1 class="text-center text-3xl font-bold mt-4 z-10">
                    {song?.name}
                </h1>

                <!-- Botones de Like y Add to playlist/queue -->
                <div class="flex justify-center mt-4 space-x-4">
                    <a class="flex items-center space-x-2 p-2 bg-[#212121] rounded hover:bg-[#313131] select-none">
                        <LikeButton song={song} client:only="react" />
                        <span>Like</span>
                    </a>
                    <button class="flex items-center space-x-2 p-2 bg-[#212121] rounded hover:bg-[#313131]">
                        <EllipsisVertical className="w-5 h-5" />
                        <span>More Options</span>
                    </button>
                </div>

            </div>

            <!-- Columna derecha: Álbum -->
            <div class="flex flex-col items-center justify-center">
                <div
                    class="flex items-center bg-gray-200 p-4 rounded-lg shadow-md w-full max-w-sm"
                >
                    <!-- Nombre del álbum -->
                    <div class="ml-4">
                        <a
                            class="text-2xl font-bold text-gray-800 text-left md:hover:underline md:hover:cursor-pointer"
                            href={`/album/${album?.album.id}`}
                        >
                            {album?.album.name}
                        </a>
                        <p
                            class="text-gray-600 text-md font-semibold text-left"
                        >
                            Album released on
                            {
                                album?.album.releaseDate
                                    .split("-")
                                    .reverse()
                                    .join("/")
                            }
                        </p>
                    </div>
                </div>
            </div>
        </div>

        <section class="my-10 mx-16 flex flex-row justify-between">
            <div class="mx-auto px-8 py-8 bg-[#303030] rounded-lg">
                <h2 class="text-2xl font-bold mb-4 text-center">Lyrics</h2>
                <div>
                    <div class="text-white transition-all text-justify">
                        {
                            song.lyrics
                                ? song?.lyrics
                                      .split("\n")
                                      .map((line) => (
                                          <p class="text-center">{line}</p>
                                      ))
                                : "Lyrics not available"
                        }
                    </div>
                </div>
            </div>
            <div class="mx-auto px-8 py-8 bg-[#303030] rounded-lg h-fit">
                <h2 class="text-2xl font-bold text-left pb-4">
                    More songs from <a
                        class="md:hover:underline italic"
                        href={`/album/${album?.album.id}`}
                        >{album?.album.name}</a
                    >
                </h2>
                {
                    album?.songs.map((song, index) => (
                        <a
                            href={`/song/${song.id}`}
                            class="flex-none w-48 group transition"
                        >
                            <div class="flex justify-between items-center mt-2">
                                {/* Índice */}
                                <label class="text-[#b2b2b2] font-semibold mr-3">
                                    {index + 1}
                                </label>

                                {/* Nombre de la canción */}
                                <label class="truncate font-semibold block group-hover:underline cursor-pointer">
                                    {song.name}
                                </label>

                                {/* Duración */}
                                <span class="ml-auto text-right text-[#b2b2b2]">
                                    {getTime(song.duration)}
                                </span>
                            </div>
                        </a>
                    ))
                }
            </div>
        </section>

        <section class="px-32 pt-12 pb-3 text-white">
            <h2 class="text-2xl font-bold text-left">
                More songs from the Artist
            </h2>
            <!-- Aqui podemos poner el nombre del artista tipo mas canciones de Eminem -->
            <div
                class="relative flex items-center gap-5 overflow-x-auto py-4 px-2"
            >
                {
                    artistSongs?.tracks.map((song) => (
                        <a
                            href={`/song/${song.id}`}
                            class="flex-none w-48 md:hover:scale-105 transition"
                        >
                            <img
                                class="rounded-lg w-full aspect-square object-cover"
                                src={
                                    song.album.images[0].url ||
                                    "/song-placeholder.png"
                                }
                                alt="Song Cover"
                            />
                            <label class="truncate font-semibold text-center block mt-2">
                                {song.name}
                            </label>
                            <label class="truncate text-sm text-center text-gray-400 block">
                                {song.album.name}
                            </label>
                        </a>
                    ))
                }
            </div>
        </section>
    </div>
</Layout>
