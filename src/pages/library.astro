---
import Layout from "@/layouts/Layout.astro";
import {
    db,
    parseAlbum,
    parsePlaylist,
    parseUser,
    type AlbumDB,
    type PlaylistDB,
    type RawAlbumDB,
    type RawPlaylistDB,
    type RawUserDB,
} from "@/lib/db";
import { getStats } from "@/lib/stats";
import { Heart, Disc3, History } from "lucide-react";
import { ArrowDownAZ, ArrowUpZA, Clock } from "lucide-react";

if (!Astro.locals.user) {
    return Astro.redirect("/login");
}

const userLists = parseUser(
    db
        .prepare("SELECT lists FROM user WHERE id = ?")
        .get(Astro.locals.user.id) as RawUserDB
)?.lists;

if (!userLists) {
    return new Response("Fatal error, userLists is undefined");
}

let playlists: PlaylistDB[] = [];
let albums: AlbumDB[] = [];
if (userLists?.filter((list) => list.type == "playlist").length > 0) {
    const playlistsQuery = `SELECT * FROM playlist WHERE id = ${userLists
        ?.filter((list) => list.type == "playlist")
        .map((list) => `'${list.id}'`)
        .join(" OR id = ")}`;
    playlists = (db.prepare(playlistsQuery).all() as RawPlaylistDB[]).map(
        (playlist: RawPlaylistDB) => parsePlaylist(playlist) as PlaylistDB
    );
}
if (userLists?.filter((list) => list.type == "album").length > 0) {
    const albumsQuery = `SELECT * FROM album WHERE id = ${userLists
        ?.filter((list) => list.type == "album")
        .map((list) => `'${list.id}'`)
        .join(" OR id = ")}`;
    albums = (db.prepare(albumsQuery).all() as RawAlbumDB[]).map(
        (album) => parseAlbum(album) as AlbumDB
    );
}

const data = await getStats();
data.albums.sort((a, b) => b.timesPlayed - a.timesPlayed);
---

<Layout title="Library • Rock It!" currentPage="Library">
    <div class="mt-4 md:mt-0"></div>
    <div class="p-2 md:p-8 h-full">
        <section class="items-center justify-between md:flex hidden">
            <div>
                <label class="text-white text-4xl font-bold">Library</label>
            </div>
            <div class="flex items-center">
                <button id="filterButton" class="mr-2">
                    <ArrowDownAZ id="filterIcon" className="w-6 h-6 text-white" />
                </button>
                <input
                    id="searchInput"
                    class="font-semibold bg-neutral-900 shadow mx-auto rounded-full text-1xl pl-10 pr-2 md:w-1/10 w-full h-8 focus:outline-0"
                    style="
                        background-image: url(/search-icon.png);
                        background-position: 15px center;
                        background-size: 14px;
                        background-repeat: no-repeat;
                    "
                    placeholder="Search in Library"
                />
            </div>
        </section>

        <section class="pt-5 md:py-12 text-white">
            <h2 class="text-2xl font-bold text-left">Featured Albums</h2>
            <div
                class="relative flex items-center gap-5 overflow-x-auto py-4 md:px-2"
            >
                <!-- Aquí creamos las canciones -->

                <a
                    href={`/playlist/liked`}
                    class="library-item flex-none w-[calc(40%-10px)] md:w-48 md:hover:scale-105 transition"
                >
                    <div
                        class="relative rounded-lg w-full aspect-square object-cover"
                        style="background-image:url(/RockitBackground.png); background-size: cover;"
                    >
                        <Heart
                            className="w-1/2 h-1/2 absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2"
                            fill="white"
                        />
                    </div>
                    <label
                        class="truncate font-semibold text-center block mt-2"
                    >
                        Liked Songs
                    </label>
                    <label
                        class="truncate text-sm text-center text-gray-400 block"
                    >
                        by Rock It!
                    </label>
                </a>

                <a
                    href={`/playlist/liked`}
                    class="library-item flex-none w-[calc(40%-10px)] md:w-48 md:hover:scale-105 transition"
                >
                    <div
                        class="relative rounded-lg w-full aspect-square object-cover"
                        style="background-image:url(/RockitBackground.png); background-size: cover;"
                    >
                        <Disc3
                            className="w-1/2 h-1/2 absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2"
                        />
                    </div>
                    <label
                        class="truncate font-semibold text-center block mt-2"
                    >
                        Most Listened
                    </label>
                    <label
                        class="truncate text-sm text-center text-gray-400 block"
                    >
                        by Rock It!
                    </label>
                </a>

                <a
                    href={`/playlist/liked`}
                    class="library-item flex-none w-[calc(40%-10px)] md:w-48 md:hover:scale-105 transition"
                >
                    <div
                        class="relative rounded-lg w-full aspect-square object-cover"
                        style="background-image:url(/RockitBackground.png); background-size: cover;"
                    >
                        <History
                            className="w-1/2 h-1/2 absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2"
                        />
                    </div>
                    <label
                        class="truncate font-semibold text-center block mt-2"
                    >
                        Recent Mix
                    </label>
                    <label
                        class="truncate text-sm text-center text-gray-400 block"
                    >
                        by Rock It!
                    </label>
                </a>

                {
                    data.albums.slice(0, 4).map((album) => (
                        <a
                            href={`/album/${album.id}`}
                            class="library-item flex-none w-[calc(40%-10px)] md:w-48 md:hover:scale-105 transition"
                        >
                            <img
                                class="rounded-lg w-full aspect-square object-cover"
                                src={`/api/image/${album.image}`}
                                alt="Song Cover"
                            />
                            <label class="truncate font-semibold text-center block mt-2">
                                {album.name}
                            </label>
                            <label class="truncate text-sm text-center text-gray-400 block">
                                {album.artists.map((artist, index) => (
                                    <label
                                        class="md:hover:underline"
                                        onclick={`event.preventDefault(); event.stopPropagation(); location.href='/artist/${artist.id}' `}
                                    >
                                        {`${artist.name}${index < album.artists.length - 1 ? "," : ""}`}
                                    </label>
                                ))}
                            </label>
                        </a>
                    ))
                }
            </div>
        </section>

        <h2 class="text-2xl font-bold text-left py-4">Your Albums and Playlists</h2>
        <div
            class="grid gap-5"
        >
            <style>
                .grid {
                    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
                }
                @media (max-width: 768px) {
                    .grid {
                        grid-template-columns: repeat(auto-fill, minmax(40%, 1fr));
                    }
                }
            </style>
            {
                playlists.map((playlist) => {
                    if (!playlist) return <label>Playlist is undefined</label>;
                    return (
                        <a
                            href={`/playlist/${playlist.id}`}
                            class="w-fit h-fit flex flex-col min-w-0 max-w-full md:hover:scale-110 transition-transform library-item"
                        >
                            <img
                                class="rounded-md"
                                src={
                                    playlist.image
                                        ? `/api/image/${playlist.image}`
                                        : playlist.images[0]?.url
                                }
                            />
                            <label class="truncate font-semibold text-center">
                                {playlist.name}
                            </label>
                            <label class="truncate text-sm text-center text-gray-400">
                                {playlist.owner}
                            </label>
                        </a>
                    );
                })
            }

            {
                albums.map((album) => {
                    if (!album) return <label>Playlist is undefined</label>;
                    return (
                        <a
                            href={`/album/${album.id}`}
                            class="w-fit h-fit flex flex-col min-w-0 max-w-full md:hover:scale-105 transition-transform library-item"
                        >
                            <img
                                class="rounded-md"
                                src={
                                    album.image
                                        ? `/api/image/${album.image}`
                                        : album.images[0]?.url
                                }
                            />
                            <label class="truncate font-semibold text-center mt-1">
                                {album.name}
                            </label>
                            <div class="text-sm text-center flex flex-row text-gray-400 mx-auto">
                                {album.artists.map((artist, index) => (
                                    <label
                                        class="md:hover:underline truncate"
                                        onclick={`event.preventDefault(); event.stopPropagation(); location.href='/artist/${artist.id}' `}
                                    >
                                        {`${artist.name}${index < album.artists.length - 1 ? "," : ""}`}
                                    </label>
                                ))}
                            </div>
                        </a>
                    );
                })
            }
        </div>
        <div class="md:min-h-10 min-h-20"></div>
    </div>
    <script>
        const filterButton = document.getElementById('filterButton') as HTMLButtonElement | null;
        const filterIcon = document.getElementById('filterIcon') as HTMLElement | null;
        const searchInput = document.getElementById('searchInput') as HTMLInputElement | null;
        let filterMode: 'default' | 'asc' | 'desc' = 'default';
    
        if (filterButton && filterIcon && searchInput) {
            filterButton.addEventListener('click', () => {
                if (filterMode === 'default') {
                    filterMode = 'asc';
                    filterIcon.classList.replace('ArrowDownAZ', 'ArrowUpZA');
                } else if (filterMode === 'asc') {
                    filterMode = 'desc';
                    filterIcon.classList.replace('ArrowUpZA', 'Clock');
                } else {
                    filterMode = 'default';
                    filterIcon.classList.replace('Clock', 'ArrowDownAZ');
                }
                sortItems();
            });
    
            searchInput.addEventListener('input', filterItems);
        }
    
        function filterItems() {
            const filter = searchInput?.value.toLowerCase() || '';
            const items = document.querySelectorAll<HTMLElement>('.library-item');
            
            items.forEach(item => {
                const text = item.textContent?.toLowerCase() || '';
                if (text.includes(filter)) {
                    item.style.display = '';
                } else {
                    item.style.display = 'none';
                }
            });
        }
    
        function sortItems() {
            const itemsContainers = document.querySelectorAll('.relative.flex.items-center.gap-5.overflow-x-auto.py-4.md\\:px-2, .grid.gap-5') as NodeListOf<HTMLElement>;
            if (!itemsContainers.length) return;
    
            itemsContainers.forEach((itemsContainer) => {
                const items = Array.from(itemsContainer.children) as HTMLElement[];
    
                items.sort((a, b) => {
                    const textA = a.textContent?.toLowerCase() || '';
                    const textB = b.textContent?.toLowerCase() || '';
    
                    if (filterMode === 'asc') {
                        return textA.localeCompare(textB);
                    } else if (filterMode === 'desc') {
                        return textB.localeCompare(textA);
                    } else {
                        const isRockitA = textA.includes('rockit');
                        const isRockitB = textB.includes('rockit');
                        if (isRockitA && !isRockitB) {
                            return -1;
                        } else if (!isRockitA && isRockitB) {
                            return 1;
                        } else {
                            return textA.localeCompare(textB);
                        }
                    }
                });

                items.forEach((item) => itemsContainer.appendChild(item));
            });
        }
    </script>
</Layout>
